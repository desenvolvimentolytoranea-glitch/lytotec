
import { supabase } from "@/integrations/supabase/client";

interface AuthResult {
  success: boolean;
  error?: {
    message: string;
    code?: string;
  };
  data?: any;
}

/**
 * Obt√©m o usu√°rio atual autenticado
 * @returns Objeto com os dados do usu√°rio ou null se n√£o estiver autenticado
 */
export const getCurrentUser = async () => {
  try {
    const { data: sessionData, error: sessionError } = await supabase.auth.getSession();
    
    if (sessionError) {
      console.error("‚ùå Erro ao obter sess√£o:", sessionError);
      return null;
    }
    
    if (!sessionData.session) {
      console.log("Nenhuma sess√£o ativa encontrada");
      return null;
    }
    
    const userId = sessionData.session.user.id;
    
    // Buscar perfil do usu√°rio
    const { data: profileData, error: profileError } = await supabase
      .from('profiles')
      .select('*')
      .eq('id', userId)
      .single();
      
    if (profileError) {
      console.error("‚ùå Erro ao buscar perfil do usu√°rio:", profileError);
      // Retorna apenas os dados do usu√°rio da autentica√ß√£o
      return sessionData.session.user;
    }
    
    // Retorna dados do usu√°rio combinados com o perfil
    return {
      ...sessionData.session.user,
      ...profileData
    };
  } catch (error: any) {
    console.error("‚ùå Exce√ß√£o ao buscar usu√°rio atual:", error);
    return null;
  }
};

/**
 * Realiza o login do usu√°rio com tratamento melhorado para emails n√£o confirmados
 * @param email Email do usu√°rio
 * @param password Senha do usu√°rio
 * @returns Objeto com o resultado da opera√ß√£o
 */
export const loginUser = async (email: string, password: string): Promise<AuthResult> => {
  try {
    console.log("Tentando login com email:", email);
    
    // Tenta realizar o login
    const { data, error } = await supabase.auth.signInWithPassword({
      email,
      password
    });
    
    if (error) {
      console.error("Erro no supabase login:", error);
      
      // Tratamento espec√≠fico para email n√£o confirmado
      if (error.message.includes("Email not confirmed")) {
        return {
          success: false,
          error: {
            message: "Email n√£o confirmado. Entre em contato com o administrador para confirmar seu email.",
            code: error.code
          }
        };
      }
      
      // Tratamento espec√≠fico para erros de conex√£o
      if (error.message.includes("connection") || error.message.includes("network") || error.message.includes("fetch")) {
        return {
          success: false,
          error: {
            message: "Erro de conex√£o. Verifique sua internet e tente novamente.",
            code: error.code
          }
        };
      }
      
      return {
        success: false,
        error: {
          message: error.message,
          code: error.code
        }
      };
    }
    
    if (!data || !data.session) {
      console.error("Login bem-sucedido, mas n√£o retornou sess√£o");
      return {
        success: false,
        error: {
          message: "Falha ao criar sess√£o. Tente novamente."
        }
      };
    }
    
    console.log("Login bem-sucedido, sess√£o criada");
    return {
      success: true,
      data
    };
  } catch (error: any) {
    console.error("Exce√ß√£o no processo de login:", error);
    return {
      success: false,
      error: {
        message: error.message || "Ocorreu um erro inesperado durante o login"
      }
    };
  }
};

/**
 * Registra um novo usu√°rio
 * @param email Email do usu√°rio
 * @param password Senha do usu√°rio
 * @param nome_completo Nome completo do usu√°rio
 * @returns Objeto com o resultado da opera√ß√£o
 */
export const registerUser = async (
  email: string,
  password: string,
  nome_completo: string
): Promise<AuthResult> => {
  try {
    console.log("Tentando registrar usu√°rio:", email);
    
    // Verifica se o email j√° est√° em uso
    const { data: existingUsers } = await supabase
      .from("profiles")
      .select("email")
      .eq("email", email)
      .maybeSingle();
    
    if (existingUsers) {
      return {
        success: false,
        error: {
          message: "Este email j√° est√° registrado"
        }
      };
    }
    
    // Determina a URL de redirecionamento baseada no ambiente
    const isLocalhost = window.location.hostname === 'localhost';
    const redirectTo = isLocalhost ? `${window.location.origin}/` : "https://lytotec.com.br/";
    
    console.log("üìß URL de redirecionamento para registro:", redirectTo);
    
    // Registra o usu√°rio
    const { data, error } = await supabase.auth.signUp({
      email,
      password,
      options: {
        data: {
          nome_completo,
          email,
          email_verified: false
        },
        emailRedirectTo: redirectTo
      }
    });
    
    if (error) {
      return {
        success: false,
        error: {
          message: error.message,
          code: error.code
        }
      };
    }
    
    return {
      success: true,
      data
    };
  } catch (error: any) {
    return {
      success: false,
      error: {
        message: error.message || "Ocorreu um erro inesperado durante o registro"
      }
    };
  }
};

/**
 * Realiza o logout do usu√°rio
 * @returns Objeto com o resultado da opera√ß√£o
 */
export const logoutUser = async (): Promise<AuthResult> => {
  try {
    const { error } = await supabase.auth.signOut();
    
    if (error) {
      return {
        success: false,
        error: {
          message: error.message,
          code: error.code
        }
      };
    }
    
    return {
      success: true
    };
  } catch (error: any) {
    return {
      success: false,
      error: {
        message: error.message || "Ocorreu um erro inesperado durante o logout"
      }
    };
  }
};

/**
 * Envia email para redefini√ß√£o de senha
 * @param email Email do usu√°rio
 * @returns Objeto com o resultado da opera√ß√£o
 */
export const resetPassword = async (email: string): Promise<AuthResult> => {
  try {
    // Determina a URL de redirecionamento baseada no ambiente
    const isLocalhost = window.location.hostname === 'localhost';
    const redirectTo = isLocalhost 
      ? `${window.location.origin}/reset-password`
      : "https://lytotec.com.br/reset-password";
    
    console.log("üîê URL de redirecionamento para reset de senha:", redirectTo);
    
    const { error } = await supabase.auth.resetPasswordForEmail(email, {
      redirectTo
    });
    
    if (error) {
      return {
        success: false,
        error: {
          message: error.message,
          code: error.code
        }
      };
    }
    
    return {
      success: true
    };
  } catch (error: any) {
    return {
      success: false,
      error: {
        message: error.message || "Ocorreu um erro inesperado ao solicitar redefini√ß√£o de senha"
      }
    };
  }
};

/**
 * Atualiza a senha do usu√°rio
 * @param newPassword Nova senha
 * @returns Objeto com o resultado da opera√ß√£o
 */
export const updatePassword = async (newPassword: string): Promise<AuthResult> => {
  try {
    const { error } = await supabase.auth.updateUser({
      password: newPassword
    });
    
    if (error) {
      return {
        success: false,
        error: {
          message: error.message,
          code: error.code
        }
      };
    }
    
    return {
      success: true
    };
  } catch (error: any) {
    return {
      success: false,
      error: {
        message: error.message || "Ocorreu um erro inesperado ao atualizar a senha"
      }
    };
  }
};
