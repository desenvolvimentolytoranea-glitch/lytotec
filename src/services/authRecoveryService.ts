import { supabase } from "@/integrations/supabase/client";

interface AuthRecoveryResult {
  success: boolean;
  message: string;
  needsEmailConfirmation?: boolean;
  needsRegistration?: boolean;
  temporaryPassword?: string;
  hasPassword?: boolean;
}

/**
 * Verifica se o usu√°rio existe no Supabase Auth
 */
export const checkUserExistsInAuth = async (email: string): Promise<boolean> => {
  try {
    console.log(`üîç Verificando se usu√°rio existe no Auth: ${email}`);
    
    // Tentativa de login para verificar se usu√°rio existe
    const { error } = await supabase.auth.signInWithPassword({
      email,
      password: 'test-password-to-check-existence'
    });
    
    // An√°lise detalhada dos erros
    if (error?.message.includes('Invalid login credentials')) {
      console.log(`‚úÖ Usu√°rio ${email} EXISTE no Auth (senha incorreta)`);
      return true; // Usu√°rio existe, senha est√° errada
    } else if (error?.message.includes('Email not confirmed')) {
      console.log(`‚úÖ Usu√°rio ${email} EXISTE no Auth (email n√£o confirmado)`);
      return true; // Usu√°rio existe, email n√£o confirmado
    } else if (error?.message.includes('Invalid email')) {
      console.log(`‚ùå Usu√°rio ${email} N√ÉO EXISTE no Auth (email inv√°lido)`);
      return false;
    } else {
      console.log(`‚ùå Usu√°rio ${email} N√ÉO EXISTE no Auth (erro: ${error?.message})`);
      return false;
    }
  } catch (error) {
    console.error(`‚ùå Erro ao verificar usu√°rio no Auth (${email}):`, error);
    return false;
  }
};

/**
 * Confirma email e define senha tempor√°ria para usu√°rio v√°lido
 */
export const confirmUserEmailWithPassword = async (email: string): Promise<AuthRecoveryResult> => {
  try {
    console.log(`üîß [CONFIRMA√á√ÉO COM SENHA] Iniciando para: ${email}`);
    
    // Verificar se o usu√°rio existe em bd_funcionarios
    const { data: funcionario, error: funcionarioError } = await supabase
      .from('bd_funcionarios')
      .select('email, nome_completo, status')
      .eq('email', email)
      .single();

    if (funcionarioError || !funcionario) {
      const message = 'Email n√£o encontrado na base de funcion√°rios';
      console.log(`‚ùå [CONFIRMA√á√ÉO COM SENHA] ${message}: ${email}`);
      return {
        success: false,
        message
      };
    }

    console.log(`‚úÖ [CONFIRMA√á√ÉO COM SENHA] Funcion√°rio encontrado: ${funcionario.nome_completo} (${funcionario.status})`);

    // Verificar se funcion√°rio est√° ativo
    if (funcionario.status && funcionario.status !== 'Ativo') {
      const message = `Funcion√°rio est√° ${funcionario.status} no sistema`;
      console.log(`‚ö†Ô∏è [CONFIRMA√á√ÉO COM SENHA] ${message}: ${email}`);
      return {
        success: false,
        message
      };
    }

    // Confirmar email E definir senha tempor√°ria
    console.log(`üöÄ [CONFIRMA√á√ÉO COM SENHA] Chamando fun√ß√£o admin-confirm-email com senha para: ${email}`);
    const { data, error } = await supabase.functions.invoke('admin-confirm-email', {
      body: { 
        email,
        setTemporaryPassword: true
      }
    });

    if (error) {
      console.error(`‚ùå [CONFIRMA√á√ÉO COM SENHA] Erro na fun√ß√£o edge:`, error);
      return {
        success: false,
        message: `Erro ao processar confirma√ß√£o: ${error.message}`
      };
    }

    if (data?.temporary_password) {
      console.log(`‚úÖ [CONFIRMA√á√ÉO COM SENHA] Email confirmado e senha tempor√°ria definida: ${email}`);
      return {
        success: true,
        message: 'Email confirmado e senha tempor√°ria criada com sucesso',
        temporaryPassword: data.temporary_password,
        hasPassword: true
      };
    } else {
      console.log(`‚úÖ [CONFIRMA√á√ÉO COM SENHA] Email confirmado (sem senha tempor√°ria): ${email}`);
      return {
        success: true,
        message: 'Email confirmado com sucesso',
        hasPassword: data?.has_password || false
      };
    }
  } catch (error: any) {
    console.error(`‚ùå [CONFIRMA√á√ÉO COM SENHA] Erro cr√≠tico para ${email}:`, error);
    return {
      success: false,
      message: error.message || 'Erro ao confirmar email e definir senha'
    };
  }
};

/**
 * Confirma email de qualquer usu√°rio v√°lido
 */
export const confirmUserEmail = async (email: string): Promise<AuthRecoveryResult> => {
  try {
    console.log(`üîß [CONFIRMA√á√ÉO] Iniciando para: ${email}`);
    
    // Verificar se o usu√°rio existe em bd_funcionarios
    const { data: funcionario, error: funcionarioError } = await supabase
      .from('bd_funcionarios')
      .select('email, nome_completo, status')
      .eq('email', email)
      .single();

    if (funcionarioError || !funcionario) {
      const message = 'Email n√£o encontrado na base de funcion√°rios';
      console.log(`‚ùå [CONFIRMA√á√ÉO] ${message}: ${email}`);
      return {
        success: false,
        message
      };
    }

    console.log(`‚úÖ [CONFIRMA√á√ÉO] Funcion√°rio encontrado: ${funcionario.nome_completo} (${funcionario.status})`);

    // Verificar se funcion√°rio est√° ativo
    if (funcionario.status && funcionario.status !== 'Ativo') {
      const message = `Funcion√°rio est√° ${funcionario.status} no sistema`;
      console.log(`‚ö†Ô∏è [CONFIRMA√á√ÉO] ${message}: ${email}`);
      return {
        success: false,
        message
      };
    }

    // Tentar confirmar email via fun√ß√£o edge
    console.log(`üöÄ [CONFIRMA√á√ÉO] Chamando fun√ß√£o admin-confirm-email para: ${email}`);
    const { data, error } = await supabase.functions.invoke('admin-confirm-email', {
      body: { email }
    });

    if (error) {
      console.warn(`‚ö†Ô∏è [CONFIRMA√á√ÉO] Erro na fun√ß√£o edge: ${error.message}`);
      
      // Fallback: verificar se usu√°rio j√° existe no auth e precisa apenas ser confirmado
      const userExistsInAuth = await checkUserExistsInAuth(email);
      
      if (!userExistsInAuth) {
        const message = 'Usu√°rio precisa ser registrado primeiro';
        console.log(`‚ùå [CONFIRMA√á√ÉO] ${message}: ${email}`);
        return {
          success: false,
          message,
          needsRegistration: true
        };
      }
    }

    console.log(`‚úÖ [CONFIRMA√á√ÉO] Email confirmado com sucesso: ${email}`);
    return {
      success: true,
      message: 'Email confirmado com sucesso'
    };
  } catch (error: any) {
    console.error(`‚ùå [CONFIRMA√á√ÉO] Erro cr√≠tico para ${email}:`, error);
    return {
      success: false,
      message: error.message || 'Erro ao confirmar email'
    };
  }
};

/**
 * Sincroniza usu√°rio existente (cria conta no Auth se necess√°rio)
 */
export const syncExistingUser = async (email: string): Promise<AuthRecoveryResult> => {
  try {
    console.log(`üîÑ [SINCRONIZA√á√ÉO] Iniciando para: ${email}`);
    
    // Verificar se existe em bd_funcionarios
    const { data: funcionario, error: funcionarioError } = await supabase
      .from('bd_funcionarios')
      .select('email, nome_completo, status')
      .eq('email', email)
      .single();

    if (funcionarioError || !funcionario) {
      const message = 'Usu√°rio n√£o encontrado na base de funcion√°rios';
      console.log(`‚ùå [SINCRONIZA√á√ÉO] ${message}: ${email}`);
      return {
        success: false,
        message
      };
    }

    console.log(`‚úÖ [SINCRONIZA√á√ÉO] Funcion√°rio encontrado: ${funcionario.nome_completo}`);

    // Verificar se funcion√°rio est√° ativo
    if (funcionario.status && funcionario.status !== 'Ativo') {
      const message = `Funcion√°rio est√° ${funcionario.status}`;
      console.log(`‚ö†Ô∏è [SINCRONIZA√á√ÉO] ${message}: ${email}`);
      return {
        success: false,
        message
      };
    }

    // Verificar se existe no Auth
    const userExistsInAuth = await checkUserExistsInAuth(email);
    
    if (!userExistsInAuth) {
      // Usu√°rio n√£o existe no Auth - sugerir registro
      const message = 'Usu√°rio precisa criar conta atrav√©s do registro';
      console.log(`üìù [SINCRONIZA√á√ÉO] ${message}: ${email}`);
      return {
        success: false,
        message,
        needsRegistration: true
      };
    }

    console.log(`‚úÖ [SINCRONIZA√á√ÉO] Usu√°rio existe no Auth, confirmando email com senha: ${email}`);

    // Usu√°rio existe no Auth - confirmar email E definir senha tempor√°ria
    const confirmResult = await confirmUserEmailWithPassword(email);
    
    if (confirmResult.success) {
      console.log(`‚úÖ [SINCRONIZA√á√ÉO] Sincroniza√ß√£o completa: ${email}`);
    }

    return confirmResult;
  } catch (error: any) {
    console.error(`‚ùå [SINCRONIZA√á√ÉO] Erro cr√≠tico para ${email}:`, error);
    return {
      success: false,
      message: error.message || 'Erro ao sincronizar usu√°rio'
    };
  }
};

/**
 * Garante que o perfil do usu√°rio existe
 */
export const ensureUserProfile = async (email: string, nomeCompleto: string) => {
  try {
    console.log(`üë§ [PERFIL] Verificando perfil para: ${email}`);
    
    // Buscar usu√°rio atual (s√≥ funciona se estiver logado como admin)
    const { data: { user } } = await supabase.auth.getUser();
    
    if (!user) {
      console.log(`‚ö†Ô∏è [PERFIL] Usu√°rio n√£o autenticado - pulando cria√ß√£o de perfil`);
      return;
    }

    // Verificar se perfil j√° existe
    const { data: existingProfile } = await supabase
      .from('profiles')
      .select('id')
      .eq('email', email)
      .single();

    if (existingProfile) {
      console.log(`‚úÖ [PERFIL] Perfil j√° existe para: ${email}`);
      return;
    }

    console.log(`üìù [PERFIL] Criando perfil b√°sico para: ${email}`);
    // N√£o podemos criar perfil para outro usu√°rio devido ao RLS
    // Isso deve ser feito quando o usu√°rio fizer login
    
  } catch (error) {
    console.error(`‚ùå [PERFIL] Erro ao verificar/criar perfil para ${email}:`, error);
  }
};

/**
 * Diagn√≥stico completo do usu√°rio
 */
export const diagnoseUser = async (email: string) => {
  console.log(`üîç ======= DIAGN√ìSTICO COMPLETO - ${email} =======`);
  
  // 1. Verificar bd_funcionarios
  console.log(`üîç [1/3] Verificando bd_funcionarios...`);
  const { data: funcionario, error: funcError } = await supabase
    .from('bd_funcionarios')
    .select('email, nome_completo, status')
    .eq('email', email)
    .single();
  
  if (funcionario) {
    console.log(`‚úÖ [1/3] FUNCION√ÅRIO ENCONTRADO:`, {
      nome: funcionario.nome_completo,
      email: funcionario.email,
      status: funcionario.status
    });
  } else {
    console.log(`‚ùå [1/3] FUNCION√ÅRIO N√ÉO ENCONTRADO`);
    if (funcError) console.log(`   Erro:`, funcError.message);
  }
  
  // 2. Verificar Supabase Auth
  console.log(`üîç [2/3] Verificando Supabase Auth...`);
  const userExistsInAuth = await checkUserExistsInAuth(email);
  console.log(`${userExistsInAuth ? '‚úÖ' : '‚ùå'} [2/3] SUPABASE AUTH:`, userExistsInAuth ? 'EXISTE' : 'N√ÉO EXISTE');
  
  // 3. Verificar profiles (se conseguir)
  console.log(`üîç [3/3] Verificando profiles...`);
  try {
    const { data: profile, error: profileError } = await supabase
      .from('profiles')
      .select('id, email, funcoes')
      .eq('email', email)
      .single();
    
    if (profile) {
      console.log(`‚úÖ [3/3] PROFILE ENCONTRADO:`, {
        id: profile.id,
        email: profile.email,
        fun√ß√µes: profile.funcoes
      });
    } else {
      console.log(`‚ùå [3/3] PROFILE N√ÉO ENCONTRADO`);
      if (profileError) console.log(`   Erro:`, profileError.message);
    }
  } catch (error) {
    console.log(`‚ùå [3/3] PROFILE: Erro ao verificar`);
  }
  
  const recommendations = getRecommendations(!!funcionario, userExistsInAuth);
  console.log(`üìã RECOMENDA√á√ÉO: ${recommendations}`);
  
  console.log(`üîç ======= FIM DO DIAGN√ìSTICO - ${email} =======`);
  
  return {
    funcionario,
    userExistsInAuth,
    recommendations
  };
};

const getRecommendations = (existsInFuncionarios: boolean, existsInAuth: boolean) => {
  if (!existsInFuncionarios) {
    return 'Usu√°rio n√£o est√° autorizado - contate o RH';
  }
  
  if (!existsInAuth) {
    return 'Usu√°rio precisa se registrar atrav√©s da p√°gina de registro';
  }
  
  return 'Usu√°rio existe - tentar confirma√ß√£o de email com senha tempor√°ria';
};
