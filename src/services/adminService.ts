
import { supabase } from "@/integrations/supabase/client";

export const confirmUserEmail = async (email: string) => {
  try {
    console.log(`üîß Confirmando email via fun√ß√£o edge: ${email}`);
    
    const { data, error } = await supabase.functions.invoke('admin-confirm-email', {
      body: { email }
    });

    if (error) {
      throw error;
    }

    return { success: true, data };
  } catch (error: any) {
    console.error("Erro ao confirmar email:", error);
    throw new Error(error.message || "Erro ao confirmar email do usu√°rio");
  }
};

export const confirmUserEmailWithPassword = async (email: string) => {
  try {
    console.log(`üîë Confirmando email com senha tempor√°ria via fun√ß√£o edge: ${email}`);
    
    const { data, error } = await supabase.functions.invoke('admin-confirm-email', {
      body: { 
        email,
        setTemporaryPassword: true
      }
    });

    if (error) {
      throw error;
    }

    return { 
      success: true, 
      message: data?.message || `Email ${email} confirmado com sucesso`,
      temporaryPassword: data?.temporary_password,
      hasPassword: data?.has_password || false,
      data
    };
  } catch (error: any) {
    console.error("Erro ao confirmar email com senha:", error);
    throw new Error(error.message || "Erro ao confirmar email e definir senha do usu√°rio");
  }
};

// Fun√ß√£o gen√©rica para confirmar qualquer email de usu√°rio v√°lido
export const confirmSpecificUserEmail = async (email?: string) => {
  try {
    // Se n√£o for fornecido email, usar o email hardcoded original como fallback
    const targetEmail = email || "xmatheus457@gmail.com";
    
    console.log(`üîß Confirmando email espec√≠fico: ${targetEmail}`);
    
    // Verificar se o usu√°rio existe em bd_funcionarios primeiro
    const { data: funcionario, error: funcError } = await supabase
      .from('bd_funcionarios')
      .select('email, nome_completo')
      .eq('email', targetEmail)
      .single();

    if (funcError || !funcionario) {
      throw new Error(`Usu√°rio ${targetEmail} n√£o encontrado na base de funcion√°rios`);
    }

    const result = await confirmUserEmail(targetEmail);
    console.log(`‚úÖ Email ${targetEmail} confirmado com sucesso:`, result);
    return result;
  } catch (error) {
    console.error(`‚ùå Erro ao confirmar email ${email}:`, error);
    throw error;
  }
};

// Nova fun√ß√£o para listar usu√°rios que precisam de sincroniza√ß√£o
export const listUsersNeedingSync = async () => {
  try {
    console.log('üìã Listando usu√°rios que podem precisar de sincroniza√ß√£o...');
    
    // Buscar todos os funcion√°rios ativos
    const { data: funcionarios, error } = await supabase
      .from('bd_funcionarios')
      .select('email, nome_completo, status')
      .eq('status', 'Ativo');

    if (error) throw error;

    console.log(`üìä Encontrados ${funcionarios?.length || 0} funcion√°rios ativos`);
    return funcionarios || [];
  } catch (error) {
    console.error('‚ùå Erro ao listar funcion√°rios:', error);
    return [];
  }
};
